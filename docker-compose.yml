services:
  postgres:
    image: postgres:16-alpine
    container_name: medusa-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-medusa_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-medusa_password}
      POSTGRES_DB: ${POSTGRES_DB:-medusa_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medusa_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: medusa-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  medusa:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medusa-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-medusa_user}:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/${POSTGRES_DB:-medusa_db}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-supersecret_change_in_production}
      COOKIE_SECRET: ${COOKIE_SECRET:-supersecret_change_in_production}
      STORE_CORS: ${STORE_CORS:-http://localhost:8000}
      ADMIN_CORS: ${ADMIN_CORS:-http://localhost:9000,http://localhost:5173}
      AUTH_CORS: ${AUTH_CORS:-http://localhost:9000,http://localhost:5173}
      PORT: 9000
    ports:
      - "${MEDUSA_PORT:-9000}:9000"
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

